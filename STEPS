Create the basic structure for our app:

  $ mkdir mean
  $ cd mean/
  $ mkdir public
  $ touch public/core.js
  $ touch public/index.html
  $ touch server.js
  $ touch package.json

--------------------------------------------------------------------------------

Configure the package.json

  {
    "name"         : "node-todo",
    "version"      : "0.0.0",
    "description"  : "Simple todo application.",
    "main"         : "server.js",
    "author"       : "Scotch & Alex",
    "dependencies" : {
      "body-parser"    : "^1.4.3",
      "express"        : "^4.13.4",
      "method-override": "^2.1.3",
      "mongoose"       : "^4.4.12",
      "morgan"         : "^1.1.1"
    }
  }

--------------------------------------------------------------------------------

Lets install node

  /var/www/public/mean$ npm install

--------------------------------------------------------------------------------

Now lets configure the basic node server in server.js

    // server.js

    // set up ========================
    // create our app w/ express
    var express  = require('express');
    var app      = express();
    // mongoose for mongodb
    var mongoose = require('mongoose');
    // log requests to the console (express4)
    var morgan = require('morgan');
    // pull information from HTML POST (express4)
    var bodyParser = require('body-parser');
    // simulate DELETE and PUT (express4)
    var methodOverride = require('method-override');

    // configuration =================

    // connect to mongoDB database on modulus.io
    mongoose.connect('mongodb://node:nodeuser@mongo.onmodulus.net:27017/uwO3mypu');

     // set the static files location /public/img will be /img for users
    app.use(express.static(__dirname + '/public'));
    // log every request to the console
    app.use(morgan('dev'));
    // parse application/x-www-form-urlencoded
    app.use(bodyParser.urlencoded({'extended':'true'}));
    // parse application/json
    app.use(bodyParser.json());
    // parse application/vnd.api+json as json
    app.use(bodyParser.json({ type: 'application/vnd.api+json' }));

    app.use(methodOverride());

    // listen (start app with node server.js) ==================================
    app.listen(8080);
    console.log("App listening on port 8080");

--------------------------------------------------------------------------------

Angular is on its own in the frontend. It accesses all the data it needs through
the Node API. Node hits the database and returns JSON information to Angular
based on the RESTful routing.

This way, you can separate the frontend application from the actual API. If you
want to extend the API, you can always build more routes and functions into it
without affecting the frontend Angular application. This way you can eventually
build different apps on different platforms since you just have to hit the API.

--------------------------------------------------------------------------------
https://scotch.io/tutorials/creating-a-single-page-todo-app-with-node-and-angular#creating-our-node-api
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
